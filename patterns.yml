#
# PARSER DEFINITIONS FILE IN YML FORMAT
#
# Please use 'ts' as field name for dates and time
# RegexTools: https://regex101.com/#javascript

# Sensitive data can be replaced with a hashcode (sha1)
# it applies to fields matching the field names by a regular expression
# Note: this function is not optimized (yet) and might cause 10-15% performance hit
#autohash: !!js/regexp /user|client_ip|password|email|credit_card_number|payment_info/i
# set the hash function (default sha256), sha256,sha512
#hashFunction: sha512


# set originalLine to false when auothash fields
# the original line might include sensitive data!
originalLine: true

# Please note when geoIP: true
# There will be a slight delay during first start of logagent while maxmind
# database is downloaded. Logagent downloads the MaxMind database every 24hrs or
# during startup.
geoIP: true

# The database is stored in a temporary directory
# The path could be modified via env. variable MAXMIND_DB_DIR
maxmindDbDir: /tmp/
debug: false

# post process all JSON input
json:
  enabled: true
#  autohashFields:
#    _HOSTNAME: true
#  removeFields:
#    - _SOURCE_REALTIME_TIMESTAMP
#  transform: !!js/function >
#   function (sourceName, parsedObject, config) {
#     for (var i=0; i<config.removeFields.length; i++) {
#       console.log('delete ' + config.removeFields[i])
#       delete parsedObject[config.removeFields[i]]
#     }
#   }


# The global transform function is called for each parsed line.
# A good place to do add global fields, custom date processing, or special parsers.
#globalTransform: !!js/function >
#  function (source, parsedObject) {
#    // this function is called after parsing
#    // regardless of the logging source
#    // for pattern specific functions use transform in pattern definitions
#    // this.geopip lookups for ip adresses
#    // this.moment for date parsing
#    // Example:
#    // this.enrichGeoIp(parsedObject, 'client_ip')
#  }

# IMPORTANT:
# PATTERNS ARE EVALUATED SEQUENTIALLY FOR EACH LOG EVENT. PUT MORE COMPLEX AND MORE SPECIFIC PATTERNS FIRST.
# As soon as a pattern matches a log event the rest of the patterns are skipped.
#
# To test your pattern: cat myTest.log | logagent -n <pattern name here> -yml -f mypatterns.yml
# A pattern name are things like 'kubernetes hyperkube' or 'Elasticsearch' or 'Apache Solr' below.

patterns:
  - sourceName: !!js/regexp /confluence/
    blockStart: !!js/regexp ^\d{4}-\d{2}-\d{2}
    match:
      - type: confluence-multiline
        regex: !!js/regexp /^([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2})[,0-9]{4} (DEBUG|INFO|WARN|ERROR) \[(.*)\] \[([a-zA-Z.]*)\] (.*)/
        fields: [ts, severity, application, method, message]
        dateFormat: yyyy-MM-dd HH:mm:ss,SSS

  - # jrebel pattern
    match:
      - type: jrebel
        regex: !!js/regexp /^\[([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3})] (DEBUG|INFO|WARN|ERROR) \[([^\]]+)\] \[([^\]]+)\] - (.*)/
        fields: [ts, severity, logger, thread, message]
        dateFormat: yyyy-MM-dd HH:mm:ss.SSS

  - # intellij pattern
    match:
    - type: intellij
      regex: !!js/regexp /^\[([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3})] +(DEBUG|INFO|WARN|ERROR) - ([^ ]+) - \[[^\]]+\] (.*)/
      fields: [ts, severity, logger, thread, message]
      dateFormat: yyyy-MM-dd HH:mm:ss,SSS
    - type: intellij2
      regex: !!js/regexp /\[([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3})] (DEBUG|INFO|WARN|ERROR) +([^ ]+) - (.*)/
      fields: [ts, severity, logger, thread, message]
      dateFormat: yyyy-MM-dd HH:mm:ss,SSS

  - # Elasticsearch
    blockStart: !!js/regexp /\d{4}-\d{2}-\d{2}\s[\d+|\:]+.\d+|log4j\:\S+\s/
    sourceName: !!js/regexp /elasticsearch/
    match:
    - type: elasticsearch
      regex: !!js/regexp ^\[(\d{4}-\d{2}-\d{2}\s[\d+|\:]+.\d+)\]\[(.+?)\]\[(.+?)\s*\]\s*\[(.+?)\]\s([\s|\S]+)
      fields: [ts,severity,source,node_name,message]
      dateFormat: YYYY-MM-DD HH:mm:ss,SS
    - type: elasticsearch
      regex: !!js/regexp ^\[(\d{4}-\d{2}-\d{2}\s[\d+|\:]+.\d+)\]\[(.+?)\]\[(.+?)\s*\]\s*\s([\s|\S]+)
      fields: [ts,severity,source,message]
      dateFormat: YYYY-MM-DD HH:mm:ss,SS

  - # MongoDB
    # name of the docker image
    sourceName: !!js/regexp /mongo/
    # 2015-07-28T00:35:46.329+0000 I JOURNAL  [initandlisten] journal dir=/data/db/journal
    match:
      - type: mongodb
        regex: !!js/regexp /^(\d{4}-\d{2}-\d{2}T[\d|\.|\:]+\+\d{4})\s(\w+)\s(\S+)\s+\[(\S+)\]\s(.+)/i
        fields:  [ts,severity, component, context, message]
        dateFormat: YYYY-MM-DDTHH:mm:ss.SSZ

  - # REDIS
    # name of the docker image
    # example: "1:M 22 Jul 21:58:28.146 # Server started, Redis version 3.0.2"
    sourceName: !!js/regexp /redis/i
    match:
    - type: redis
      fields: [pid,node_type,ts,message]
      regex: !!js/regexp /^(\d+):\w+\s(\d\d\s\w+.+)\s\W\s(.*)/
    - type: redis
      fields: [pid,ts,message]
      regex: !!js/regexp /^\[(\d+)\]\s(.+?)\s\*\s(.+)/i
      dateFormat: DD MMM HH:mm:ss.S
    - type: redis
      regex: !!js/regexp /^(.*)/i
      fields: message

  - # Sonatype Nexus
    sourceName: !!js/regexp /nexus/
    # YYYY-MM-DD starts a new log entry
    blockStart: !!js/regexp ^\d{4}-\d{2}-\d{2}
    match:
      - type: nexus
        regex: !!js/regexp /^([\d|\-|\s|\:|\.|\,|\+]+)\s+([A-Z]+)\s+[^\[]*\[\s*([^\]]+)\]\s(\*?\w+)\s+([\w|\.]+)\W+(.+)/
        fields: [ts,severity,thread,user,class,message]
        dateFormat: YYYY-MM-DD HH:mm:ss,SSSZ

  - # mysql
    # 2015-07-25 14:11:35 0 [Note] mysqld (mysqld 5.6.26) starting as process 1 ...
    sourceName: !!js/regexp /mysql/
    match:
      - regex: !!js/regexp /^(\d{4}-\d{2}-\d{2}\s[\d|\:]+)\s(\d+)\s\[(.+?)\]\s+(.*)/
        fields: [ts,pid,level,message]
        dateFormat: YYYY-MM-DD HH:mm:ss
        type: mysql

  - #  Web Logs
    sourceName: !!js/regexp /httpd|access_log|apache2|nginx/
    match:
      - type: access_log_combined
        regex: !!js/regexp /^([0-9a-f.:]+)\s(-|\S+)\s(-|\S+)\s\[([0-9]{2}\/[a-z]{3}\/[0-9]{4}\:[0-9]{2}:[0-9]{2}:[0-9]{2}[^\]]*)\] \"(\w+)\s(.*)\" ([0-9|\-]+) ([0-9|\-]+) \"([^\"]+)\" \"([^\"]+)\"/i
        fields: [client_ip,remote_id,user,'ts',method,path,status_code,size,referer,user_agent]
        geoIP: client_ip
        dateFormat: DD/MMM/YYYY:HH:mm:ss ZZ
        transform: !!js/function >
          function transformMessage (p) {
            p.message = p.method + ' ' + p.path
            if(p.status_code === '-') {
              p.status_code = 0
            }
            if(p.size === '-') {
              p.size = 0
            }
          }
      # nginx proxy jwilder/nginx-proxy
      - regex: !!js/regexp /^(\S+)\s+\|\s(\S+)\s+([0-9a-f.:]+)\s+(-|.+?)\s+(-|.+?)\s\[(.*)\]\s"(.+?)\s(.+?)\s(.+?)"\s(\d+)\s(\d+)\s"(.+?)"\s"(.+?)"/i
        type: access_common
        fields:       [proxy_service,virtual_host,client_ip,remote_id,user,ts,method,path,http_version,status_code,size,url,user_agent]
        dateFormat: DD/MMM/YYYY:HH:mm:ss ZZ
        geoIP: client_ip
        transform: !!js/function >
          function transformMessage (p) {
            p.message = p.method + ' ' + p.path
            if(p.status_code === '-') {
              p.status_code = 0
            }
            if(p.size === '-') {
              p.size = 0
            }
          }
      # Common Log Format
      - regex: !!js/regexp /(^[0-9a-f.:]+)\s+(-|.+?)\s+(-|.+?)\s+\[([0-9]{2}\/[a-z]{3}\/[0-9]{4}\:[0-9]{2}:[0-9]{2}:[0-9]{2}[^\]]*)\] \"(\S+?)\s(\S*?)\s{0,1}(\S+?)\" ([0-9|\-]+) ([0-9|\-]+)/i
        type: access_common
        fields: [client_ip,remote_id,user,ts,method,path,http_version,status_code,size]
        geoIP: client_ip
        dateFormat: DD/MMM/YYYY:HH:mm:ss ZZ
        transform: !!js/function >
          function transformMessage (p) {
            p.message = p.method + ' ' + p.path
            if(p.status_code === '-') {
              p.status_code = 0
            }
            if(p.size === '-') {
              p.size = 0
            }
          }

      - regex: !!js/regexp /^(\S+)\s+(-|.+?)\s+(-|.+?)\s+\[(.*)\]\s\"(\S+)\s(\S+)\s(\S+)\s(\d+)\s([\d+|\"-\"])/i
        type: access_common
        fields:       [client_ip,remote_id,user,ts,method,path,http_version,status_code,size]
        geoIP: client_ip
        dateFormat: DD/MMM/YYYY:HH:mm:ss ZZ
        transform: !!js/function >
          function transformMessage (p) {
            p.message = p.method + ' ' + p.path
            if(p.status_code === '-') {
              p.status_code = 0
            }
            if(p.size === '-') {
              p.size = 0
            }
          }
      - type: nginx_error_log
        regex: !!js/regexp /^(\d{4}\/\d{2}\/\d{2}\s[\d|\:]+)\s\[(.+?)]\s(\d+)#(\d+)\:\s(.*)/
        fields: [ts,level,pid,tid,message]
        dateformat: YYYY/MM/DD HH:mm:ss

      - type: apache_error_log
        regex: !!js/regexp /^\[(\w{3} \w{3} \d{2} [\d|\:]+\s\d+)\] \[(.+?)\] \[client ([\d|\.]+)\] (.+)/
        fields: [ts,level,client_ip,message]
        dateformat: ddd MMM DD hh:mm:ss.SSS YYYY

      # Apache MPM events
      - regex: !!js/regexp /^\[(.+?)\]\s+\[(.+?)\]\s+\[(.+?)\]\s+(.+)/
        fields: [ts,event_type,processInfo,message]
        type: apache_mpm
        dateformat: ddd MMM DD hh:mm:ss.SSS YYYY

dateFormats: [
    'DD/MMM/YYYY:HH:mm:ss ZZ', #apache
    'MMM D HH:mm:ss',
    'MMM DD HH:mm:ss',
    'DD MMM HH:mm:ss.S',
    'DD MMM HH:mm:ss',
    'DDD MMM DD HH:mm:ss',
    'YYYY-MM-DD',
    'YYYY-MM-DD HH:mm',
    'YYYY-MM-DDTHH:mm',
    'YYYY-MM-DD HHmm',
    'YYYYMMDD HH:mm',
    'YYYYMMDD HHmm',
    'YYYYMMDD',
    'YYYY-MM-DDTHHmm',
    'YYYYMMDDTHH:mm',
    'YYYYMMDDTHHmm',
    'YYYYMMDDTHH:mm',
    'YYYY-MM-DD HH:mm:ss',
    'YYYY-MM-DD HHmmss',
    'YYYY-MM-DDTHH:mm:ss',
    'YYYY-MM-DDTHHmmss',
    'YYYYMMDDTHHmmss',
    'YYYY-MM-DD HH:mmZ',
    'YYYY-MM-DD HHmmZ',
    'YYYY-MM-DD HH:mm:ssZ',
    'YYYY-MM-DD HHmmssZ',
    'YYYYMMDD HH:mmZ',
    'YYYYMMDD HHmmZ',
    'YYYY-MM-DDTHH:mmZ',
    'YYYY-MM-DDTHHmmZ',
    'YYYY-MM-DDTHH:mm:ssZ',
    'YYYY-MM-DDTHHmmssZ',
    'YYYYMMDDTHH:mmZ',
    'YYYYMMDDTHHmmZ',
    'YYYYMMDDTHHmmZ',
    'YYYYMMDDTHHmmssZ',
    'YYYYMMDDTHH:mmZ']
